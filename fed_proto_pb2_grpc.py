# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fed_proto_pb2 as fed__proto__pb2


class GradServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.grad_descent = channel.unary_unary(
                '/fed_package.GradService/grad_descent',
                request_serializer=fed__proto__pb2.grad_request.SerializeToString,
                response_deserializer=fed__proto__pb2.grad_reply.FromString,
                )


class GradServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def grad_descent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GradServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'grad_descent': grpc.unary_unary_rpc_method_handler(
                    servicer.grad_descent,
                    request_deserializer=fed__proto__pb2.grad_request.FromString,
                    response_serializer=fed__proto__pb2.grad_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fed_package.GradService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GradService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def grad_descent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fed_package.GradService/grad_descent',
            fed__proto__pb2.grad_request.SerializeToString,
            fed__proto__pb2.grad_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DatasizeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_datasize = channel.unary_unary(
                '/fed_package.DatasizeService/get_datasize',
                request_serializer=fed__proto__pb2.datasize_request.SerializeToString,
                response_deserializer=fed__proto__pb2.datasize_reply.FromString,
                )


class DatasizeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_datasize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatasizeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_datasize': grpc.unary_unary_rpc_method_handler(
                    servicer.get_datasize,
                    request_deserializer=fed__proto__pb2.datasize_request.FromString,
                    response_serializer=fed__proto__pb2.datasize_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fed_package.DatasizeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DatasizeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_datasize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fed_package.DatasizeService/get_datasize',
            fed__proto__pb2.datasize_request.SerializeToString,
            fed__proto__pb2.datasize_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StopServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.stop = channel.unary_unary(
                '/fed_package.StopService/stop',
                request_serializer=fed__proto__pb2.stop_request.SerializeToString,
                response_deserializer=fed__proto__pb2.stop_reply.FromString,
                )


class StopServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StopServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=fed__proto__pb2.stop_request.FromString,
                    response_serializer=fed__proto__pb2.stop_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fed_package.StopService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StopService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fed_package.StopService/stop',
            fed__proto__pb2.stop_request.SerializeToString,
            fed__proto__pb2.stop_reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
